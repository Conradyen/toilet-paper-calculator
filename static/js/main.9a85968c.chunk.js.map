{"version":3,"sources":["utils.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["calculateDate","numDays","today","Date","till","getTime","Footer","style","footerStyle","pStyle","Component","marginTop","color","backgroundColor","textAlign","width","marginBottom","padding","useStyles","makeStyles","SlidingBar","verticalAlign","margin","smallItem","formControl","minWidth","App","details","innerdiv","grid","ValueLabelComponent","props","children","open","value","popperRef","React","useRef","useEffect","current","update","Tooltip","PopperProps","enterTouchDelay","placement","title","dateToString","theday","getMonth","toString","getDate","classes","useState","numRoll","setRolls","useRoll","setuseRolls","numbottle","setBottle","usebottle","setuseBottle","bottleVol","setBottleVol","numMask","setnumMask","useMask","setuseMask","calsulateRemainDayOfRoll","Math","floor","calsulateRemainDayOfBottle","calsulateRemainDayOfMask","getDaysbeforeShopping","min","i","className","icon","faCog","size","Typography","Paper","elevation","id","gutterBottom","Grid","container","spacing","alignItems","justify","item","faToiletPaper","xs","Slider","onChange","event","newValue","aria-labelledby","FormControl","InputLabel","Select","labelId","target","Array","map","index","key","MenuItem","FormHelperText","faWineBottle","faMask","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9a85968c.chunk.js","sourcesContent":["export default function calculateDate(numDays) {\n  var today = new Date();\n  var msPerDay = 24 * 60 * 60 * 1000; // Number of milliseconds per day\n  var till = numDays * msPerDay;\n  var theday = new Date(today.getTime() + till);\n  return theday;\n}\n","import React, { Component } from \"react\";\n\nexport default class Footer extends Component {\n  render() {\n    return (\n      <footer style={footerStyle}>\n        <p style={pStyle}>\n          Data are calculated based on my personal experience result may vary.\n        </p>\n        <p style={pStyle}>&copy;Ming-Hsuan Yen, 2020</p>\n      </footer>\n    );\n  }\n}\n\nconst footerStyle = {\n  marginTop: \"20px\",\n  color: \"#797777\",\n  backgroundColor: \"#414141\",\n  textAlign: \"center\",\n  width: \"100%\"\n};\n\nconst pStyle = {\n  marginBottom: \"0px\",\n  padding: \"5px\"\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faToiletPaper,\n  faWineBottle,\n  faMask,\n  faCog\n} from \"@fortawesome/free-solid-svg-icons\";\nimport calculateDate from \"./utils\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Footer from \"./Footer\";\nimport Switch from \"@material-ui/core/Switch\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\n\nconst ICONCOLOR = \"#1554e8\";\nconst useStyles = makeStyles({\n  SlidingBar: {\n    width: \"80%\",\n    padding: \"1px\",\n    textAlign: \"center\",\n    verticalAlign: \"middle\",\n    margin: \"auto\"\n  },\n  smallItem: {\n    padding: \"1px\"\n  },\n  formControl: {\n    minWidth: \"120px\",\n    margin: \"10px\"\n  },\n  App: {\n    textAlign: \"center\"\n  },\n  details: {\n    margin: \"20px\"\n  },\n  innerdiv: {\n    textAlign: \"center\"\n  },\n  grid: {\n    margin: \"auto\"\n  }\n});\n\nfunction ValueLabelComponent(props) {\n  const { children, open, value } = props;\n\n  const popperRef = React.useRef(null);\n  React.useEffect(() => {\n    if (popperRef.current) {\n      popperRef.current.update();\n    }\n  });\n\n  return (\n    <Tooltip\n      PopperProps={{\n        popperRef\n      }}\n      open={open}\n      enterTouchDelay={0}\n      placement=\"top\"\n      title={value}\n    >\n      {children}\n    </Tooltip>\n  );\n}\n\nfunction dateToString(theday) {\n  return (theday.getMonth() + 1).toString() + \"/\" + theday.getDate().toString();\n}\n\nfunction App() {\n  const classes = useStyles();\n  const [numRoll, setRolls] = useState(5);\n  const [useRoll, setuseRolls] = useState(5);\n  const [numbottle, setBottle] = useState(10);\n  const [usebottle, setuseBottle] = useState(5);\n  const [bottleVol, setBottleVol] = useState(500);\n  const [numMask, setnumMask] = useState(7);\n  const [useMask, setuseMask] = useState(7);\n  const [useLiter, setuseLiter] = useState(false);\n\n  const handleRollChange = (event, newValue) => {\n    setRolls(newValue);\n  };\n\n  const handleuseRollChange = (event, newValue) => {\n    setuseRolls(event.target.value);\n  };\n\n  const handleBottleChange = (event, newValue) => {\n    setBottle(newValue);\n  };\n  const handleuseBottleChange = (event, newValue) => {\n    setuseBottle(event.target.value);\n  };\n  const handleBottleVolChange = (event, newValue) => {\n    setBottleVol(event.target.value);\n  };\n\n  const handleMaskChange = (event, newValue) => {\n    setnumMask(newValue);\n  };\n\n  const handleuseMaskChange = (event, newValue) => {\n    setuseMask(event.target.value);\n  };\n\n  const handleuseLiterChange = () => {\n    setuseLiter(prev => !prev);\n  };\n\n  const calsulateRemainDayOfRoll = (numRoll, useRoll) => {\n    //one roll last for 10 times\n    return Math.floor((numRoll * 10) / useRoll);\n  };\n\n  const calsulateRemainDayOfBottle = (numbottle, usebottle) => {\n    //55 ml per bottle\n    return Math.floor((numbottle * bottleVol) / (1000 * usebottle));\n  };\n  const calsulateRemainDayOfMask = (numMask, useMask) => {\n    return Math.floor(numMask / useMask);\n  };\n  const getDaysbeforeShopping = () => {\n    var min = numRoll;\n    var arr = [\n      calsulateRemainDayOfRoll(numRoll, useRoll),\n      calsulateRemainDayOfBottle(numbottle, usebottle),\n      calsulateRemainDayOfMask(numMask, useMask)\n    ];\n    for (var i of arr) {\n      if (i <= min) {\n        min = i;\n      }\n    }\n    return min;\n  };\n\n  return (\n    <div className={classes.App}>\n      <header className=\"App-header\">\n        <FontAwesomeIcon\n          className=\"App-logo\"\n          icon={faCog}\n          color={\"#3fe085\"}\n          size=\"6x\"\n        />\n      </header>\n      <h1>{dateToString(calculateDate(getDaysbeforeShopping()))}</h1>\n      <h1>\n        {getDaysbeforeShopping()}\n        {\" days before next shopping trip\"}\n      </h1>\n      <div className={classes.details}>\n        <Typography>\n          {\"Remaining tolite paper can last \"}\n          {calsulateRemainDayOfRoll(numRoll, useRoll)}\n          {\" days, until \"}\n          {dateToString(\n            calculateDate(calsulateRemainDayOfRoll(numRoll, useRoll))\n          )}\n        </Typography>\n        <Typography>\n          {\"Remaining bottle water can last \"}\n          {calsulateRemainDayOfBottle(numbottle, usebottle)}\n          {\" days, until \"}\n          {dateToString(\n            calculateDate(calsulateRemainDayOfBottle(numbottle, usebottle))\n          )}\n        </Typography>\n        <Typography>\n          {\"Remaining maskes can last \"}\n          {calsulateRemainDayOfMask(numMask, useMask)}\n          {\" days, until \"}\n          {dateToString(\n            calculateDate(calsulateRemainDayOfMask(numMask, useMask))\n          )}\n        </Typography>\n      </div>\n      <Paper className={classes.SlidingBar} elevation={0}>\n        <Typography id=\"continuous-slider\" gutterBottom>\n          {\"Currently at \"}\n          {numRoll}\n          {\" rolls of toilet paper\"}\n        </Typography>\n        <Grid container spacing={2} alignItems=\"center\" justify=\"center\">\n          <Grid item>\n            <FontAwesomeIcon\n              className={classes.smallItem}\n              icon={faToiletPaper}\n              color={ICONCOLOR}\n              size=\"2x\"\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <Slider\n              value={numRoll}\n              onChange={handleRollChange}\n              ValueLabelComponent={ValueLabelComponent}\n              aria-labelledby=\"continuous-slider\"\n            />\n          </Grid>\n          <Grid item>\n            <FormControl className={classes.formControl}>\n              <InputLabel id=\"demo-simple-select-label\">\n                Times to toilet\n              </InputLabel>\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={useRoll}\n                onChange={handleuseRollChange}\n              >\n                {[...Array(10)].map((index, key) => (\n                  <MenuItem value={key}>{key}</MenuItem>\n                ))}\n              </Select>\n              <FormHelperText>per day</FormHelperText>\n            </FormControl>\n          </Grid>\n        </Grid>\n      </Paper>\n      <Paper className={classes.SlidingBar} elevation={0}>\n        <Typography id=\"continuous-slider\" gutterBottom>\n          {\"Currently at \"}\n          {numbottle}\n          {\" bottles of water\"}\n        </Typography>\n\n        <Grid container spacing={1} alignItems=\"center\" justify=\"center\">\n          <Grid item>\n            <FontAwesomeIcon\n              className={classes.smallItem}\n              icon={faWineBottle}\n              color={ICONCOLOR}\n              size=\"2x\"\n            />\n          </Grid>\n\n          <Grid item xs={3}>\n            <Slider\n              value={numbottle}\n              onChange={handleBottleChange}\n              ValueLabelComponent={ValueLabelComponent}\n              aria-labelledby=\"continuous-slider\"\n            />\n          </Grid>\n          <Grid item>\n            <FormControl className={classes.formControl}>\n              <InputLabel id=\"demo-simple-select-label\">\n                milliliter of water\n              </InputLabel>\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={usebottle}\n                onChange={handleuseBottleChange}\n              >\n                {[...Array(10)].map((index, key) => (\n                  <MenuItem value={key}>{key * 1000}</MenuItem>\n                ))}\n              </Select>\n              <FormHelperText>per day</FormHelperText>\n            </FormControl>\n          </Grid>\n          <Grid item>\n            <FormControl className={classes.formControl}>\n              <InputLabel id=\"demo-simple-select-label\">\n                Volume of bottle\n              </InputLabel>\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={bottleVol}\n                onChange={handleBottleVolChange}\n              >\n                <MenuItem value={500}>500</MenuItem>\n                <MenuItem value={550}>550</MenuItem>\n                <MenuItem value={700}>700</MenuItem>\n                <MenuItem value={1000}>1000</MenuItem>\n              </Select>\n              <FormHelperText>milliliter</FormHelperText>\n            </FormControl>\n          </Grid>\n        </Grid>\n      </Paper>\n      <Paper className={classes.SlidingBar} elevation={0}>\n        <Typography id=\"continuous-slider\" gutterBottom>\n          {\"You own \"}\n          {numMask} {\" masks.\"}\n        </Typography>\n        <Grid container spacing={2} alignItems=\"center\" justify=\"center\">\n          <Grid item>\n            <FontAwesomeIcon\n              className={classes.smallItem}\n              icon={faMask}\n              color={ICONCOLOR}\n              size=\"2x\"\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <Slider\n              value={numMask}\n              onChange={handleMaskChange}\n              ValueLabelComponent={ValueLabelComponent}\n              aria-labelledby=\"continuous-slider\"\n            />\n          </Grid>\n          <Grid item>\n            <FormControl className={classes.formControl}>\n              <InputLabel id=\"demo-simple-select-label\">Mask</InputLabel>\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={useMask}\n                onChange={handleuseMaskChange}\n              >\n                {[...Array(10)].map((index, key) => (\n                  <MenuItem value={key}>{key}</MenuItem>\n                ))}\n              </Select>\n              <FormHelperText>per day</FormHelperText>\n            </FormControl>\n          </Grid>\n        </Grid>\n      </Paper>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}